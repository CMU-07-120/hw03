#use <conio>
#use <string>

/* swap strings */
void swap(string[] S, int i, int j) {
  string tmp = S[i];
  S[i] = S[j];
  S[j] = tmp;
}

/* Q(1): The results should be returned in alphabetical order, but 
         what is being returned instead? 
   Q(2): Is partitioning working over the right range(s)?
   Q(3)[BONUS]: What kind of sort is this? Do you know?
*/
int partition(string[] S, int lower, int pivot_idx, int upper) {
  string pivot = S[pivot_idx];
  swap(S, pivot_idx, upper-1);

  int left = lower;
  int right = upper-1;

  while (left <= right) {
    if (string_compare(S[left], pivot) < 0) {
      left++;
    } else {
      swap(S, left, right);
      right--;
    }
  }

  return pivot_idx;
}

void sort(string[] S, int lower, int upper) {
  if (upper-lower <= 1) {
    return;
  } else {
    int pivot_idx = lower + (upper-lower)/2; 
    int mid = partition(S, lower, pivot_idx, upper);
    sort(S, lower, mid);
    sort(S, mid + 1, upper);
  }
}

/* int main() {
  bundle_t S = read_lines("favorites.txt");
  int length = string_bundle_length(S);
  string[] favs = string_bundle_array(S);

  println("Before:");
  for (int i = 0; i < length; i++) {
    printf("(%d) %s\n", i, favs[i]);
  }
  println("--------------------");

  sort(favs, 0, length);

  println("After:");
  for (int i = 0; i < length; i++) {
    printf("(%d) %s\n", i, favs[i]);
  }
  println("--------------------");

  return 0;
} */